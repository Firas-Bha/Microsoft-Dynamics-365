# Define the trigger for the pipeline

trigger:
- main

# Define the agent pool
pool:
  name: 'my-personal-computer'

variables:
  - group: BuildVariables
  

# Define stages
stages:
- stage: Build
  jobs:
  - job: Build
    variables:
      build.clean: all
      platform: x64
      version: "current"
      appVersion: "1.0"
      appBuild: $[counter(variables['appVersion'], 0)]
      appRevision: 0
      createRuntimePackages: False
      skipComponentGovernanceDetection: True
    steps:

    - task: PowerShell@2
      displayName: 'Set Execution Policy'
      inputs:
        targetType: 'inline'
        script: |
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

    - task: PowerShell@2
      displayName: 'Update Build Number'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[build.updatebuildnumber]$(appVersion).$(appBuild).$(appRevision)"

    - task: PowerShell@2
      displayName: 'Install BcContainerHelper'
      inputs:
        targetType: 'inline'
        script: |
          Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
          Install-Module -Name BcContainerHelper -Force -SkipPublisherCheck -AllowClobber -Scope CurrentUser
          $artifactUrl = Get-BcArtifactUrl -type sandbox -country us -select latest
          New-BCContainer -accept_eula -containerName test -artifactUrl $artifactUrl
    


- stage: Deploy
  jobs:
  - deployment: DeployToEnvironment
    displayName: 'Deploy to Production'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            displayName: 'Deploy to Production Environment'
            inputs:
              targetType: 'inline'
              script: |
                # Add your deployment script here
                # Example: Publish-Application -Environment 'Production'
